generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Instance {
  id           String   @id
  instanceId   String   @unique
  nameDevice   String?
  numberDevice String?
  webhookUrl   String?
  events       String[] @db.Text
  status       String   @default("disconnected")
  platform     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastAccess   DateTime @default(now())

  // Relações
  connectionLogs   ConnectionLog[]
  messageLogs      MessageLog[]
  preKeys          PreKey[]
  sessions         Session[]
  senderKeys       SenderKey[]
  credentials      Credential?
  identities       Identity[]
  appStateKeys     AppStateKey[]
  appStateVersions AppStateVersion[]
  signedPreKeys    SignedPreKey[]

  @@map("instances")
}

model PreKey {
  keyId      Int       @id @map("id")
  instanceId String
  used       Boolean   @default(false)
  usedAt     DateTime?
  createdAt  DateTime  @default(now())
  privateKey String    @map("private")
  publicKey  String    @map("public")
  instance   Instance  @relation(fields: [instanceId], references: [instanceId], onDelete: Cascade)

  @@unique([instanceId, keyId])
  @@map("pre_keys")
}

model Session {
  id         Int      @id @default(autoincrement())
  instanceId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  device     Int      @default(0)
  jid        String
  record     Json
  instance   Instance @relation(fields: [instanceId], references: [instanceId], onDelete: Cascade)

  @@unique([instanceId, jid, device])
  @@map("sessions")
}

model SenderKey {
  id         String   @id @default(cuid())
  instanceId String
  groupId    String
  senderId   String
  senderKey  Bytes
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  instance   Instance @relation(fields: [instanceId], references: [instanceId], onDelete: Cascade)

  @@unique([instanceId, groupId, senderId])
  @@map("sender_keys")
}

model AppStateKey {
  id         String   @id
  instanceId String
  keyId      String
  keyData    Bytes
  createdAt  DateTime @default(now())
  instance   Instance @relation(fields: [instanceId], references: [instanceId], onDelete: Cascade)

  @@unique([instanceId, keyId])
  @@map("app_state_keys")
}

model AppStateVersion {
  id         String   @id @default(cuid())
  instanceId String
  name       String
  version    Int
  hash       Bytes?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  instance   Instance @relation(fields: [instanceId], references: [instanceId], onDelete: Cascade)

  @@unique([instanceId, name])
  @@map("app_state_versions")
}

model ConnectionLog {
  id         String   @id @default(cuid())
  instanceId String
  event      String
  status     String?
  message    String?
  metadata   Json?
  timestamp  DateTime @default(now())
  instance   Instance @relation(fields: [instanceId], references: [instanceId], onDelete: Cascade)

  @@map("connection_logs")
}

model MessageLog {
  id          String   @id @default(cuid())
  instanceId  String
  messageId   String?
  fromJid     String?
  toJid       String?
  messageType String?
  content     String?
  metadata    Json?
  timestamp   DateTime @default(now())
  instance    Instance @relation(fields: [instanceId], references: [instanceId], onDelete: Cascade)

  @@map("message_logs")
}

model Credential {
  instanceId        String  @id
  registrationId    Int
  noiseKey          String
  identityKey       String
  advSecretKey      String?
  signedPreKeyId    Int?
  signedPreKeyPub   String?
  signedPreKeyPriv  String?
  signedPreKeySig   String?
  companionKey      String? // companion_enc_static em base64
  updatedAt         DateTime
  instance          Instance @relation(fields: [instanceId], references: [instanceId], onDelete: Cascade)

  @@map("credentials")
}

model Identity {
  id           Int      @id @default(autoincrement())
  instanceId   String
  jid          String
  identityKey  String
  trustLevel   Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  instance     Instance @relation(fields: [instanceId], references: [instanceId], onDelete: Cascade)

  @@unique([instanceId, jid])
  @@map("identities")
}

model SignedPreKey {
  id        Int      @id
  instanceId String
  public    String
  private   String
  signature String
  timestamp DateTime
  instance  Instance @relation(fields: [instanceId], references: [instanceId], onDelete: Cascade)

  @@unique([instanceId, id])
  @@map("signed_prekeys")
}
